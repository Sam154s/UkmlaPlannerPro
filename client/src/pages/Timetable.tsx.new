import { useState, useEffect, useRef } from 'react';
import FullCalendar from '@fullcalendar/react';
import timeGridPlugin from '@fullcalendar/timegrid';
import dayGridPlugin from '@fullcalendar/daygrid';
import interactionPlugin from '@fullcalendar/interaction';
import timelinePlugin from '@fullcalendar/timeline';
import { format, parseISO, addMinutes } from 'date-fns';
import { Button } from '@/components/ui/button';
import { SelectSubjects } from '@/components/ui/select-subjects';
import { StudyConfig } from '@/components/ui/study-config';
import { AIEventChat } from '@/components/ui/ai-event-chat';
import { BreakSettings, DEFAULT_USER_PREFERENCES, UserPreferences as LifestylePreferences } from '@/components/ui/break-settings';
import { ExamCountdown, ExamDate } from '@/components/ui/exam-countdown';
import { useToast } from '@/hooks/use-toast';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Calendar as CalendarIcon, PlusCircle, X, Clock, Settings, AlarmClock, RefreshCw, Sparkles } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { notificationService } from '@/utils/notificationService';
import masterSubjects from '@/data/masterSubjects';
import { generateSpiralTimetable } from '@/utils/spiralAlgorithm';
import { UserEvent, UserPerformance } from '@/utils/spiralAlgorithm';
import { cn } from '@/lib/utils';
import '../styles/calendar.css';

// Types
interface UserPreferences {
  weeklyHours: number;
  yearGroup: number;
  daysPerWeek: number;
  selectedSubjects: string[];
}

interface CalendarEvent {
  id: string;
  title: string;
  start: string;
  end: string;
  backgroundColor?: string;
  borderColor?: string;
  textColor?: string;
  allDay?: boolean;
  classNames?: string[];
  extendedProps?: {
    topics?: any[];
    isHoliday?: boolean;
  };
}

const DEFAULT_PREFERENCES: UserPreferences = {
  weeklyHours: 0,
  yearGroup: 0,
  daysPerWeek: 0,
  selectedSubjects: [],
};

const STORAGE_KEYS = {
  PREFERENCES: 'study-preferences',
  HOLIDAYS: 'holiday-events',
  USER_EVENTS: 'user-events',
  USER_PERFORMANCE: 'user-performance',
  REVISION_COUNTS: 'revision-counts',
  STUDY_EVENTS: 'study-events',
  USER_LIFESTYLE: 'user-lifestyle',
  EXAM_DATES: 'exam-dates',
};

// Generate a random ID for events
const generateId = () => Math.random().toString(36).substring(2, 9);

export default function Timetable() {
  // Get toast notification function
  const { toast } = useToast();
  
  // State for user preferences
  const [weeklyHours, setWeeklyHours] = useState(DEFAULT_PREFERENCES.weeklyHours);
  const [yearGroup, setYearGroup] = useState(DEFAULT_PREFERENCES.yearGroup);
  const [daysPerWeek, setDaysPerWeek] = useState(DEFAULT_PREFERENCES.daysPerWeek);
  const [selectedSubjects, setSelectedSubjects] = useState<string[]>(DEFAULT_PREFERENCES.selectedSubjects);
  
  // State for events and calendar
  const [studyEvents, setStudyEvents] = useState<CalendarEvent[]>([]);
  const [holidayEvents, setHolidayEvents] = useState<CalendarEvent[]>([]);
  const [userEvents, setUserEvents] = useState<UserEvent[]>([]);
  const [revisionCount, setRevisionCount] = useState(0);
  const [calendarRef, setCalendarRef] = useState<any>(null);
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);

  // State for holidays
  const [newHolidayName, setNewHolidayName] = useState('');
  const [newHolidayStartDate, setNewHolidayStartDate] = useState<Date | undefined>(undefined);
  const [newHolidayEndDate, setNewHolidayEndDate] = useState<Date | undefined>(undefined);
  
  // State for lifestyle preferences
  const [lifestylePreferences, setLifestylePreferences] = useState<LifestylePreferences>(DEFAULT_USER_PREFERENCES);
  
  // State for exam dates
  const [examDates, setExamDates] = useState<ExamDate[]>([]);
  
  // State for user performance (placeholder for AI-related features)
  const [userPerformance, setUserPerformance] = useState<UserPerformance>({
    subjects: {},
    topics: {},
  });
  
  // State for tracking session study counts
  const [sessionRevisionCounts, setSessionRevisionCounts] = useState<Record<string, number>>({});
  
  // State for session detail modal
  const [isSessionDetailOpen, setIsSessionDetailOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<any>(null);
  
  // State for hover tooltip
  const [tooltipVisible, setTooltipVisible] = useState(false);
  const [tooltipContent, setTooltipContent] = useState<{
    subject: string;
    topics: any[];
    position: {top: number; left: number};
  } | null>(null);

  // Loaded flag to prevent multiple loads
  const preferencesLoaded = useRef(false);

  // Handle window resize for responsive design
  useEffect(() => {
    const handleResize = () => setWindowWidth(window.innerWidth);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Handle session click events from calendar events
  useEffect(() => {
    const handleSessionClickEvent = (e: Event) => {
      const customEvent = e as CustomEvent<{ eventId: string, event: any }>;
      const eventId = customEvent.detail.eventId;
      const event = customEvent.detail.event;
      
      // Get the DOM element with session data attributes
      const sessionDetailContent = document.getElementById('session-detail-content');
      if (sessionDetailContent) {
        // Set data attributes for the dialog content
        sessionDetailContent.setAttribute('data-event-title', event.title);
        sessionDetailContent.setAttribute('data-event-topics', JSON.stringify(event.extendedProps?.topics || []));
        sessionDetailContent.setAttribute('data-event-start', event.start?.toISOString() || '');
        sessionDetailContent.setAttribute('data-event-end', event.end?.toISOString() || '');
        
        // Trigger the dialog to open
        const dialogTrigger = document.getElementById('session-detail-dialog-trigger');
        if (dialogTrigger) {
          dialogTrigger.click();
        }
      }
      
      // Increment the study count for this session
      setSessionRevisionCounts((prev: Record<string, number>) => {
        const newCounts = { ...prev };
        newCounts[eventId] = (newCounts[eventId] || 0) + 1;
        
        // Save to localStorage
        localStorage.setItem(STORAGE_KEYS.REVISION_COUNTS, JSON.stringify(newCounts));
        
        return newCounts;
      });
    };
    
    document.addEventListener('session:click', handleSessionClickEvent);
    
    // Clean up the event listener
    return () => {
      document.removeEventListener('session:click', handleSessionClickEvent);
    };
  }, []);

  // Save study events when they change
  useEffect(() => {
    if (!preferencesLoaded.current) return;
    localStorage.setItem(STORAGE_KEYS.STUDY_EVENTS, JSON.stringify(studyEvents));
  }, [studyEvents]);

  // Load saved preferences on first mount
  useEffect(() => {
    if (preferencesLoaded.current) return;
    
    // First load from localStorage for offline functionality
    // Load user preferences
    const savedPreferences = localStorage.getItem(STORAGE_KEYS.PREFERENCES);
    if (savedPreferences) {
      try {
        const parsedPreferences = JSON.parse(savedPreferences) as UserPreferences;
        setWeeklyHours(parsedPreferences.weeklyHours);
        setYearGroup(parsedPreferences.yearGroup);
        setDaysPerWeek(parsedPreferences.daysPerWeek);
        setSelectedSubjects(parsedPreferences.selectedSubjects);
      } catch (error) {
        console.error('Failed to parse saved preferences', error);
      }
    }
    
    // Load saved study events directly
    const savedStudyEvents = localStorage.getItem(STORAGE_KEYS.STUDY_EVENTS);
    if (savedStudyEvents) {
      try {
        setStudyEvents(JSON.parse(savedStudyEvents));
      } catch (error) {
        console.error('Failed to parse saved study events', error);
      }
    }
    
    // Load saved revision counts
    const savedRevisionCounts = localStorage.getItem(STORAGE_KEYS.REVISION_COUNTS);
    if (savedRevisionCounts) {
      try {
        setSessionRevisionCounts(JSON.parse(savedRevisionCounts));
      } catch (error) {
        console.error('Failed to parse saved revision counts', error);
      }
    }

    // Load saved holidays
    const savedHolidays = localStorage.getItem(STORAGE_KEYS.HOLIDAYS);
    if (savedHolidays) {
      try {
        setHolidayEvents(JSON.parse(savedHolidays));
      } catch (error) {
        console.error('Failed to parse saved holidays', error);
      }
    }

    // Load user events
    const savedUserEvents = localStorage.getItem(STORAGE_KEYS.USER_EVENTS);
    if (savedUserEvents) {
      try {
        setUserEvents(JSON.parse(savedUserEvents));
      } catch (error) {
        console.error('Failed to parse saved user events', error);
      }
    }

    // Load user performance data
    const savedPerformance = localStorage.getItem(STORAGE_KEYS.USER_PERFORMANCE);
    if (savedPerformance) {
      try {
        setUserPerformance(JSON.parse(savedPerformance));
      } catch (error) {
        console.error('Failed to parse saved performance data', error);
      }
    }
    
    // Load lifestyle preferences
    const savedLifestyle = localStorage.getItem(STORAGE_KEYS.USER_LIFESTYLE);
    if (savedLifestyle) {
      try {
        setLifestylePreferences(JSON.parse(savedLifestyle));
      } catch (error) {
        console.error('Failed to parse saved lifestyle preferences', error);
      }
    }
    
    // Load exam dates
    const savedExamDates = localStorage.getItem(STORAGE_KEYS.EXAM_DATES);
    if (savedExamDates) {
      try {
        setExamDates(JSON.parse(savedExamDates));
      } catch (error) {
        console.error('Failed to parse saved exam dates', error);
      }
    }

    // Then try to load from backend API
    const loadBackendData = async () => {
      try {
        const apiModule = await import('../lib/api');
        const { api } = apiModule;
        
        // Load timetable data
        api.timetable.get()
          .then(data => {
            if (data) {
              // Update preferences if available
              if (data.preferences) {
                setWeeklyHours(data.preferences.weeklyHours);
                setYearGroup(data.preferences.yearGroup);
                setDaysPerWeek(data.preferences.daysPerWeek);
                setSelectedSubjects(data.preferences.selectedSubjects);
                localStorage.setItem(STORAGE_KEYS.PREFERENCES, JSON.stringify(data.preferences));
              }
              
              // Update study events if available
              if (data.studyEvents && data.studyEvents.length > 0) {
                setStudyEvents(data.studyEvents);
              }
              
              // Update holiday events if available
              if (data.holidayEvents && data.holidayEvents.length > 0) {
                setHolidayEvents(data.holidayEvents);
                localStorage.setItem(STORAGE_KEYS.HOLIDAYS, JSON.stringify(data.holidayEvents));
              }
            }
          })
          .catch(err => console.error('Error loading timetable data:', err));
        
        // Load user performance data
        api.performance.get()
          .then(data => {
            if (data) {
              setUserPerformance(data);
              localStorage.setItem(STORAGE_KEYS.USER_PERFORMANCE, JSON.stringify(data));
            }
          })
          .catch(err => console.error('Error loading user performance data:', err));
      } catch (error) {
        console.error('Error importing API module:', error);
      }
    };
    
    loadBackendData();
    preferencesLoaded.current = true;

    // Generate timetable with saved preferences if subjects are selected
    setTimeout(() => {
      if (selectedSubjects.length > 0) {
        handleGenerate();
      }
    }, 500);
  }, []);

  // Save preferences whenever they change
  useEffect(() => {
    if (!preferencesLoaded.current) return;

    const preferencesToSave: UserPreferences = {
      weeklyHours,
      yearGroup,
      daysPerWeek,
      selectedSubjects,
    };

    // Save to localStorage for offline functionality
    localStorage.setItem(STORAGE_KEYS.PREFERENCES, JSON.stringify(preferencesToSave));
    
    // Optional: Save to backend API
    try {
      import('../lib/api').then(({ api }) => {
        api.timetable.save({ 
          preferences: preferencesToSave,
          studyEvents,
          holidayEvents 
        }).catch(err => console.error('Error saving timetable to API:', err));
      });
    } catch (error) {
      console.error('Error importing API module:', error);
    }
  }, [weeklyHours, yearGroup, daysPerWeek, selectedSubjects, studyEvents, holidayEvents]);

  // Save holidays when they change
  useEffect(() => {
    if (!preferencesLoaded.current) return;
    localStorage.setItem(STORAGE_KEYS.HOLIDAYS, JSON.stringify(holidayEvents));
  }, [holidayEvents]);

  // Save user events when they change
  useEffect(() => {
    if (!preferencesLoaded.current) return;
    localStorage.setItem(STORAGE_KEYS.USER_EVENTS, JSON.stringify(userEvents));
  }, [userEvents]);
  
  // Save lifestyle preferences when they change
  useEffect(() => {
    if (!preferencesLoaded.current) return;
    localStorage.setItem(STORAGE_KEYS.USER_LIFESTYLE, JSON.stringify(lifestylePreferences));
  }, [lifestylePreferences]);
  
  // Save exam dates when they change
  useEffect(() => {
    if (!preferencesLoaded.current) return;
    localStorage.setItem(STORAGE_KEYS.EXAM_DATES, JSON.stringify(examDates));
  }, [examDates]);
  
  // Custom mouse event handlers for the event hover tooltip
  const handleEventMouseEnter = (info: any) => {
    const event = info.event;
    if (event.extendedProps?.isHoliday) return;
    
    const topics = event.extendedProps?.topics || [];
    if (!topics.length) return;
    
    // Get position from the DOM element
    const rect = info.el.getBoundingClientRect();
    
    // Set tooltip content
    setTooltipContent({
      subject: event.title,
      topics: topics,
      position: {
        top: rect.top + window.scrollY,
        left: rect.right + window.scrollX + 10
      }
    });
    
    // Show tooltip
    setTooltipVisible(true);
  };
  
  const handleEventMouseLeave = () => {
    setTooltipVisible(false);
  };
  
  // Calendar midnight refresh
  useEffect(() => {
    if (!calendarRef) return;

    const updateCalendarView = () => {
      const calendarApi = calendarRef.getApi();
      calendarApi.today();
      calendarApi.render();
    };

    const interval = setInterval(() => {
      const now = new Date();
      if (now.getHours() === 0 && now.getMinutes() === 0) {
        updateCalendarView();
      }
    }, 60000);

    return () => clearInterval(interval);
  }, [calendarRef]);

  // Generate timetable based on current settings
  const handleGenerate = () => {
    // Create blocks with the spiral algorithm
    const blocks = generateSpiralTimetable({
      weeklyStudyHours: weeklyHours,
      yearGroup,
      daysPerWeek,
      favouriteSubjects: selectedSubjects,
      subjectsData: masterSubjects,
      userEvents, // Pass user events to avoid scheduling conflicts
      userPerformance, // Pass performance data for adaptive scheduling
      revisionCount: revisionCount
    });

    // Convert blocks to calendar events
    const calendarEvents = blocks.map(block => ({
      id: generateId(),
      title: block.subject,
      start: `${block.date}T${block.startTime}`,
      end: `${block.date}T${block.endTime}`,
      backgroundColor: getSubjectColor(block.subject),
      borderColor: block.isInterjection ? '#ffffff' : getSubjectColor(block.subject),
      classNames: block.isInterjection ? ['interjection-event'] : undefined,
      extendedProps: {
        topics: block.topics
      }
    }));

    setStudyEvents(calendarEvents);
    setRevisionCount(prev => prev + 1);

    if (calendarRef) {
      const calendarApi = calendarRef.getApi();
      calendarApi.today();
    }
  };

  // Handle event drag and drop
  const handleEventDrop = (eventDropInfo: any) => {
    const { event } = eventDropInfo;
    
    if (event.extendedProps.isHoliday) {
      // Handle holiday event drop
      setHolidayEvents(prev => prev.map(ev => {
        if (ev.id === event.id) {
          return {
            ...ev,
            start: event.start.toISOString(),
            end: event.end ? event.end.toISOString() : event.start.toISOString(),
          };
        }
        return ev;
      }));
    } else {
      // Handle study event drop
      setStudyEvents(prev => prev.map(ev => {
        if (ev.id === event.id) {
          return {
            ...ev,
            start: event.start.toISOString(),
            end: event.end ? event.end.toISOString() : event.start.toISOString(),
          };
        }
        return ev;
      }));
    }
  };

  // Add a new holiday
  const handleAddHoliday = () => {
    if (!newHolidayName || !newHolidayStartDate) return;
    
    const endDate = newHolidayEndDate || newHolidayStartDate;
    
    // Create array of dates between start and end
    const dates: Date[] = [];
    const currentDate = new Date(newHolidayStartDate);
    const lastDate = new Date(endDate);
    
    while (currentDate <= lastDate) {
      dates.push(new Date(currentDate));
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    // Create a holiday event for each day
    const newHolidays = dates.map(date => {
      const dateStr = date.toISOString().split('T')[0];
      return {
        id: generateId(),
        title: newHolidayName,
        start: `${dateStr}T00:00:00`,
        end: `${dateStr}T23:59:59`,
        allDay: true,
        backgroundColor: '#f43f5e',
        borderColor: '#e11d48',
        textColor: '#ffffff',
        extendedProps: {
          isHoliday: true
        }
      };
    });
    
    setHolidayEvents(prev => [...prev, ...newHolidays]);
    
    // Convert to UserEvent format to block scheduling
    const newUserEvents: UserEvent[] = dates.map(date => {
      const dateStr = date.toISOString().split('T')[0];
      return {
        name: newHolidayName,
        date: dateStr,
        startTime: '00:00',
        endTime: '23:59',
        recurringWeekly: false,
        type: 'personal'
      };
    });
    
    setUserEvents(prev => [...prev, ...newUserEvents]);
    
    // Reset form
    setNewHolidayName('');
    setNewHolidayStartDate(undefined);
    setNewHolidayEndDate(undefined);
    
    // Show confirmation
    toast({
      title: "Holiday added",
      description: `${newHolidayName} has been added to your calendar`,
    });
  };

  // Get all events (study events + holidays + other user events) for the calendar
  const allEvents = [...studyEvents, ...holidayEvents];

  // Get available calendar views based on screen size
  const getAvailableViews = () => {
    if (windowWidth < 640) {
      return {
        timeGridDay: { type: 'timeGrid', duration: { days: 1 } }
      };
    }
    
    return {
      timeGridDay: { type: 'timeGrid', duration: { days: 1 } },
      timeGridWeek: { type: 'timeGrid', duration: { days: 7 } },
      dayGridMonth: { type: 'dayGrid', duration: { months: 1 } },
      timelineWeek: { type: 'timeline', duration: { days: 7 } }
    };
  };

  // Get color for a subject (using official UKMLA content map headings)
  const getSubjectColor = (subject: string) => {
    const colors = {
      "Acute and emergency": '#8b5cf6',
      "Cancer": '#6366f1',
      "Cardiovascular": '#3b82f6',
      "Child health": '#06b6d4',
      "Dermatology": '#0ea5e9',
      "Digital health": '#0284c7',
      "Ear, nose and throat": '#0369a1',
      "Endocrinology": '#0891b2',
      "Ethics and law": '#14b8a6',
      "Evidence-based practice": '#10b981',
      "Gastroenterology": '#059669',
      "Genetics and genomics": '#16a34a',
      "Global and population health": '#22c55e',
      "Haematology": '#84cc16',
      "Health promotion and illness prevention": '#a3e635',
      "Immunology": '#ca8a04',
      "Infectious disease": '#d97706',
      "Insights from humanities": '#ea580c',
      "Mental health": '#ef4444',
      "Metabolic health": '#f97316',
      "Musculoskeletal": '#f59e0b',
      "Neurology": '#eab308',
      "Obstetrics and gynaecology": '#fb7185',
      "Ophthalmology": '#ec4899',
      "Palliative and end of life care": '#d946ef',
      "Pharmacology and therapeutics": '#a855f7',
      "Prescribing": '#9333ea',
      "Professional knowledge": '#7c3aed',
      "Public health": '#6d28d9',
      "Renal and urological": '#4c1d95',
      "Respiratory": '#4338ca',
      "Surgery": '#1e40af',
      "Values and behaviours": '#1d4ed8'
    };
    
    return colors[subject] || `hsl(${Math.floor(Math.random() * 360)}, 70%, 65%)`;
  };

  // Handle AI-powered schedule reflow
  const handleAiReflow = () => {
    // TODO: Implement AI reflow logic
    // For now, just regenerate the timetable
    handleGenerate();
    
    toast({
      title: "Schedule reflowed",
      description: "Your timetable has been reorganized with AI assistance",
    });
  };
  
  // Render event content function for FullCalendar
  const renderEventContent = (eventInfo: any) => {
    const event = eventInfo.event;
    const topics = event.extendedProps?.topics || [];
    const isHoliday = event.extendedProps?.isHoliday;
    
    if (isHoliday) {
      return (
        <div className="w-full h-full p-1 flex items-center justify-center text-white">
          <div className="text-sm font-semibold">{event.title}</div>
        </div>
      );
    }
    
    // Handle session click
    const handleSessionClick = () => {
      // Use the parent component's state setters
      window.setTimeout(() => {
        // This is a workaround to avoid context issues in the rendering function
        const clickEvent = new CustomEvent('session:click', { 
          detail: { eventId: event.id, event: event }
        });
        document.dispatchEvent(clickEvent);
      }, 0);
    };

    return (
      <TooltipProvider>
        <Tooltip delayDuration={200}>
          <TooltipTrigger asChild>
            <div 
              className="w-full h-full p-1 cursor-pointer transition-opacity hover:opacity-90" 
              onClick={handleSessionClick}
            >
              <div className="text-sm font-semibold">
                {event.title}
              </div>
              {/* Only show the subject title, not the topics */}
            </div>
          </TooltipTrigger>
          {topics && topics.length > 0 && (
            <TooltipContent side="right" align="start" className="z-50 w-80 max-h-80 overflow-auto bg-white/95 backdrop-blur-sm border shadow-lg p-3">
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <p className="font-semibold text-sm">{event.title} - Session Contents:</p>
                </div>
                <div className="max-h-60 overflow-y-auto pr-2">
                  <ul className="space-y-1">
                    {topics.map((topic: any, index: number) => (
                      <li key={index} className="text-sm flex items-start gap-1">
                        <span className="mt-1 inline-block w-2 h-2 flex-shrink-0">
                          {topic.type === 'main' ? (
                            <span className="inline-block w-2 h-2 bg-theme rounded-full"></span>
                          ) : (
                            <span className="inline-block w-2 h-2 border border-theme rounded-full"></span>
                          )}
                        </span>
                        <span>{topic.name}</span>
                      </li>
                    ))}
                  </ul>
                </div>
                <p className="text-xs italic pt-2 border-t mt-2">Click for detailed session structure</p>
              </div>
            </TooltipContent>
          )}
        </Tooltip>
      </TooltipProvider>
    );
  };
  
  // Handle adding AI-suggested event
  const handleAddAiEvent = (event: any) => {
    // Convert AI event to calendar event
    const newEvent: CalendarEvent = {
      id: generateId(),
      title: event.title,
      start: `${event.date}T${event.startTime}`,
      end: `${event.date}T${event.endTime}`,
      backgroundColor: event.type === 'personal' ? '#3b82f6' : 
                      event.type === 'placement' ? '#10b981' :
                      event.type === 'meal' ? '#f97316' :
                      event.type === 'sleep' ? '#9333ea' : '#64748b',
      borderColor: event.type === 'personal' ? '#2563eb' : 
                  event.type === 'placement' ? '#059669' :
                  event.type === 'meal' ? '#ea580c' :
                  event.type === 'sleep' ? '#7e22ce' : '#475569',
      extendedProps: {
        isHoliday: false
      }
    };
    
    // Add to user events
    const userEvent: UserEvent = {
      name: event.title,
      date: event.date,
      startTime: event.startTime,
      endTime: event.endTime,
      recurringWeekly: event.recurring || false,
      recurringDays: event.recurringDays || [],
      type: event.type
    };
    
    setUserEvents(prev => [...prev, userEvent]);
    
    // If it's recurring, create events for each day
    if (event.recurring && event.recurringDays?.length) {
      // Handle recurring events (implementation depends on your needs)
      // This is a placeholder
      toast({
        title: "Recurring event added",
        description: `${event.title} has been added to your schedule on ${event.recurringDays.join(', ')}`,
      });
    } else {
      // Add to calendar
      setHolidayEvents(prev => [...prev, newEvent]);
      
      toast({
        title: "Event added",
        description: `${event.title} has been added to your schedule`,
      });
    }
    
    // Reflow the schedule if needed
    if (studyEvents.length > 0) {
      handleAiReflow();
    }
  };
  
  // UI for the application
  return (
    <div className="container mx-auto p-4 space-y-4 max-w-full h-[calc(100vh-80px)] flex flex-col">
      {/* Toolbar with controls */}
      <div className="bg-white rounded-xl shadow-lg p-4 border border-theme/10">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Study Preferences */}
          <div className="space-y-4">
            <h2 className="text-lg font-medium">Study Configuration</h2>
            <StudyConfig
              weeklyHours={weeklyHours}
              onWeeklyHoursChange={setWeeklyHours}
              yearGroup={yearGroup}
              onYearGroupChange={setYearGroup}
              daysPerWeek={daysPerWeek}
              onDaysPerWeekChange={setDaysPerWeek}
            />
          </div>

          {/* Subject Selection */}
          <div className="space-y-4 md:col-span-2">
            <h2 className="text-lg font-medium">Subject Selection</h2>
            <SelectSubjects
              selectedSubjects={selectedSubjects}
              onSelectedSubjectsChange={setSelectedSubjects}
              allSubjects={masterSubjects.map(s => s.name)}
            />
          </div>
        </div>
        
        {/* Action Buttons */}
        <div className="flex flex-wrap gap-2 mt-4 items-center justify-end">
          {/* Generate Button */}
          <Button 
            onClick={handleGenerate}
            disabled={weeklyHours === 0 || selectedSubjects.length === 0 || daysPerWeek === 0}
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Generate
          </Button>
          
          {/* AI Reflow Button */}
          <Button 
            variant="outline"
            className="border-theme/30 hover:bg-theme/5 text-theme"
            onClick={handleAiReflow}
            disabled={studyEvents.length === 0}
          >
            <Sparkles className="mr-2 h-4 w-4" />
            Reflow with AI
          </Button>
          
          {/* Lifestyle Settings Button */}
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="secondary" size="sm" className="flex items-center gap-2">
                <Settings size={16} />
                Lifestyle Settings
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Lifestyle & Break Settings</DialogTitle>
                <DialogDescription>
                  Configure your preferred break times, meals, sleep schedule, and placement hours
                </DialogDescription>
              </DialogHeader>
              
              <BreakSettings
                preferences={lifestylePreferences}
                onChange={setLifestylePreferences}
              />
              
              <DialogFooter className="mt-6">
                <DialogClose asChild>
                  <Button variant="outline">Cancel</Button>
                </DialogClose>
                <Button onClick={() => {
                  localStorage.setItem('user-preferences', JSON.stringify(lifestylePreferences));
                  toast({
                    title: "Settings saved",
                    description: "Your lifestyle preferences have been updated",
                  });
                }}>Save Changes</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          
          {/* Exam Countdown Button */}
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline" size="sm" className="flex items-center gap-2">
                <AlarmClock size={16} />
                Exam Countdown
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Exam Countdown</DialogTitle>
                <DialogDescription>
                  Track the time remaining until your important exams
                </DialogDescription>
              </DialogHeader>
              
              <ExamCountdown
                examDates={examDates}
                onUpdateExamDates={setExamDates}
              />
            </DialogContent>
          </Dialog>
        </div>
      </div>
      
      {/* Tabbed interface for Calendar and AI Assistant */}
      <Tabs defaultValue="calendar" className="w-full mb-4">
        <TabsList>
          <TabsTrigger value="calendar">Calendar</TabsTrigger>
          <TabsTrigger value="ai-assistant">AI Assistant</TabsTrigger>
        </TabsList>
        
        <TabsContent value="calendar" className="space-y-4 pt-4">
          {/* Full-Page Calendar */}
          <div className="flex-1 min-h-0 bg-white rounded-xl shadow-lg border border-theme/10 overflow-hidden">
            <FullCalendar
              ref={setCalendarRef}
              plugins={[timeGridPlugin, dayGridPlugin, interactionPlugin, timelinePlugin]}
              initialView={windowWidth < 640 ? "timeGridDay" : "timeGridWeek"}
              headerToolbar={{
                left: 'prev,next today',
                center: 'title',
                right: windowWidth < 640 
                  ? 'timeGridDay' 
                  : 'timeGridDay,timeGridWeek,dayGridMonth,timelineWeek'
              }}
              // Apply views with as any to avoid type issues with the views prop
              views={getAvailableViews() as any}
              events={allEvents}
              eventContent={renderEventContent}
              editable={true}
              eventDrop={handleEventDrop}
              eventMouseEnter={handleEventMouseEnter}
              eventMouseLeave={handleEventMouseLeave}
              allDaySlot={true}
              slotMinTime="06:00:00"
              slotMaxTime="23:00:00"
              height="100%"
              expandRows={true}
              stickyHeaderDates={true}
              weekends={true}
              nowIndicator={true}
              dayHeaderFormat={{ weekday: 'long' }}
              slotLabelFormat={{
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
              }}
              viewClassNames="modern-fullcalendar-view"
              slotLaneClassNames="modern-fullcalendar-lane"
              eventClassNames="modern-fullcalendar-event"
              dayHeaderClassNames="modern-fullcalendar-header"
              buttonText={{
                today: 'T' // Capital T for today button
              }}
            />
          </div>
          
          {/* Session Detail Dialog */}
          <Dialog>
            <DialogTrigger asChild>
              <button id="session-detail-dialog-trigger" className="hidden">Open</button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[550px]">
              <div id="session-detail-content">
                <DialogHeader>
                  <DialogTitle className="text-xl font-bold" id="session-detail-title">
                    <span className="text-gradient-theme">Study Session</span>
                  </DialogTitle>
                  <DialogDescription>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <span id="session-detail-date"></span>
                      <span id="session-detail-time"></span>
                    </div>
                  </DialogDescription>
                </DialogHeader>
                
                <div className="mt-6 space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold mb-2 flex items-center">
                      <span className="bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full">10%</span>
                      Orientation Phase
                    </h3>
                    <div className="bg-blue-50 p-3 rounded-lg">
                      <p className="text-sm text-blue-800">
                        Quick overview of all topics to orient yourself (10 minutes)
                      </p>
                      <ul className="space-y-2 list-disc list-inside mt-2" id="session-detail-all-topics">
                        {/* All topics will be populated here */}
                      </ul>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-semibold mb-2 flex items-center">
                      <span className="bg-emerald-100 text-emerald-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full">45%</span>
                      Learning Phase
                    </h3>
                    <div className="bg-emerald-50 p-3 rounded-lg">
                      <p className="text-sm text-emerald-800 mb-2">
                        Focused study on main topics (45 minutes)
                      </p>
                      <ul className="space-y-2 list-disc list-inside" id="session-detail-topics">
                        {/* Main topics will be populated here */}
                      </ul>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-semibold mb-2 flex items-center">
                      <span className="bg-violet-100 text-violet-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full">45%</span>
                      Practice Phase
                    </h3>
                    <div className="bg-violet-50 p-3 rounded-lg">
                      <p className="text-sm text-violet-800 mb-2">
                        Practice questions on SPRANKI, PassMed, or QuesMed (45 minutes)
                      </p>
                      <div className="flex gap-2 mt-2">
                        <a href="https://www.spranki.com/" target="_blank" rel="noopener noreferrer" className="text-xs bg-white px-2 py-1 rounded border border-violet-200 text-violet-800 hover:bg-violet-100 transition-colors">SPRANKI</a>
                        <a href="https://www.passmed.com/" target="_blank" rel="noopener noreferrer" className="text-xs bg-white px-2 py-1 rounded border border-violet-200 text-violet-800 hover:bg-violet-100 transition-colors">PassMed</a>
                        <a href="https://www.quesmed.com/" target="_blank" rel="noopener noreferrer" className="text-xs bg-white px-2 py-1 rounded border border-violet-200 text-violet-800 hover:bg-violet-100 transition-colors">QuesMed</a>
                      </div>
                      <ul className="space-y-2 list-disc list-inside mt-3 text-sm" id="session-detail-connections">
                        <li className="italic text-violet-700">Focus on related concepts:</li>
                        {/* Connection topics will be populated here */}
                      </ul>
                    </div>
                  </div>
                </div>
                
                <DialogFooter className="mt-6">
                  <Button variant="secondary" className="w-full">
                    Mark as Completed
                  </Button>
                </DialogFooter>
              </div>
            </DialogContent>
          </Dialog>
        </TabsContent>
        
        <TabsContent value="ai-assistant" className="pt-4">
          <div className="flex-1 bg-white rounded-xl shadow-lg border border-theme/10 p-4 h-[calc(85vh-120px)]">
            <AIEventChat 
              onAddEvent={handleAddAiEvent}
              onReflowSchedule={() => {
                // Handle AI-triggered schedule reflow
                handleAiReflow();
              }}
            />
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

// JavaScript to populate the session detail dialog from data attributes
// This code runs client-side
if (typeof document !== 'undefined') {
  document.addEventListener('DOMContentLoaded', () => {
    const detailsElement = document.getElementById('session-detail-content');
    const dialogTrigger = document.getElementById('session-detail-dialog-trigger');
    
    if (!detailsElement || !dialogTrigger) return;
    
    dialogTrigger.addEventListener('click', () => {
      try {
        // Get data from attributes
        const title = detailsElement.getAttribute('data-event-title') || 'Study Session';
        const topicsJson = detailsElement.getAttribute('data-event-topics') || '[]';
        const startTime = detailsElement.getAttribute('data-event-start') || '';
        const endTime = detailsElement.getAttribute('data-event-end') || '';
        
        // Parse topics
        const topics = JSON.parse(topicsJson);
        
        // Set title
        const titleElement = document.getElementById('session-detail-title');
        if (titleElement) {
          titleElement.textContent = title;
        }
        
        // Format and set date/time
        if (startTime && endTime) {
          const start = new Date(startTime);
          const end = new Date(endTime);
          
          const dateElement = document.getElementById('session-detail-date');
          const timeElement = document.getElementById('session-detail-time');
          
          if (dateElement) {
            dateElement.textContent = start.toLocaleDateString('en-US', { 
              month: 'long', 
              day: 'numeric', 
              year: 'numeric' 
            });
          }
          
          if (timeElement) {
            const formatTime = (date) => {
              return date.toLocaleTimeString('en-US', { 
                hour: 'numeric', 
                minute: '2-digit', 
                hour12: true 
              });
            };
            timeElement.textContent = `${formatTime(start)} - ${formatTime(end)}`;
          }
        }
        
        // Populate topics
        const allTopicsElement = document.getElementById('session-detail-all-topics');
        const topicsElement = document.getElementById('session-detail-topics');
        const connectionsElement = document.getElementById('session-detail-connections');
        
        if (allTopicsElement && topicsElement && connectionsElement) {
          // Clear previous content
          allTopicsElement.innerHTML = '';
          topicsElement.innerHTML = '';
          connectionsElement.innerHTML = '<li class="italic text-violet-700">Focus on related concepts:</li>';
          
          // Get all topics (main + connections)
          const mainTopics = topics.filter(t => t.type === 'main');
          const connectionTopics = topics.filter(t => t.type === 'connection');
          
          // Add all topics to orientation phase (main + connections)
          const allTopics = new Set();
          
          // Add main topics to the set
          mainTopics.forEach(topic => {
            allTopics.add(topic.name);
          });
          
          // Add connection topics to the set
          connectionTopics.forEach(topic => {
            if (topic.connectionTopics && topic.connectionTopics.length > 0) {
              topic.connectionTopics.forEach(connection => {
                // Extract just the topic name from "Subject: Topic"
                const topicName = connection.split(': ').pop() || connection;
                allTopics.add(topicName);
              });
            }
          });
          
          // Add all topics to orientation phase section
          allTopics.forEach(topicName => {
            const li = document.createElement('li');
            li.textContent = topicName;
            li.className = 'text-xs'; // Smaller font for quick overview
            allTopicsElement.appendChild(li);
          });
          
          // Add main topics to learning phase section
          mainTopics.forEach(topic => {
            const li = document.createElement('li');
            li.textContent = topic.name;
            topicsElement.appendChild(li);
          });
          
          // Add connection topics to practice phase section
          let connectionsAdded = false;
          connectionTopics.forEach(topic => {
            if (topic.connectionTopics && topic.connectionTopics.length > 0) {
              topic.connectionTopics.forEach(connection => {
                // Extract just the topic name from "Subject: Topic"
                const [subject, topicName] = connection.split(': ');
                
                const li = document.createElement('li');
                li.textContent = topicName + (subject ? ` (${subject})` : '');
                connectionsElement.appendChild(li);
                connectionsAdded = true;
              });
            }
          });
          
          // If no connections were added, add a placeholder
          if (!connectionsAdded) {
            const li = document.createElement('li');
            li.textContent = 'Focus on main topics from learning phase';
            li.className = 'italic';
            connectionsElement.appendChild(li);
          }
        }
      } catch (error) {
        console.error('Error populating session details:', error);
      }
    });
  });
}